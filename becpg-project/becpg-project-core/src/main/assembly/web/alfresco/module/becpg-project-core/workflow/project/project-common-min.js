function createProjectTask(){if(typeof bpm_workflowDueDate!="undefined"){task.dueDate=bpm_workflowDueDate}if(typeof bpm_workflowPriority!="undefined"){task.priority=bpm_workflowPriority}if(typeof bpm_workflowDescription!="undefined"){task.setDescription(bpm_workflowDescription)}if(typeof bpm_assignees!="undefined"&&bpm_assignees!=null){logger.log("Users size: "+bpm_assignees.size());for(var c=0;c<bpm_assignees.size();c++){var a=bpm_assignees.get(c);if(a.properties==null){a=utils.getNodeFromString(a)}logger.log("Adding user : "+a.properties.userName);if(bpm_assignees.size()>1||(typeof bpm_groupAssignees!="undefined"&&bpm_groupAssignees!=null)){task.addCandidateUser(a.properties.userName)}else{task.setAssignee(a.properties.userName)}}}if(typeof bpm_groupAssignees!="undefined"&&bpm_groupAssignees!=null){logger.log("Groups size: "+bpm_groupAssignees.size());for(var c=0;c<bpm_groupAssignees.size();c++){var b=bpm_groupAssignees.get(c);if(b.properties==null){b=utils.getNodeFromString(b)}logger.log("Adding group: "+b.properties["cm:authorityName"]);task.addCandidateGroup(b.properties["cm:authorityName"])}}};