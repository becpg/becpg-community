/*******************************************************************************
 * Copyright (C) 2010-2021 beCPG.
 *
 * This file is part of beCPG
 *
 * beCPG is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * beCPG is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with beCPG. If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package fr.becpg.test.repo.product.formulation;

import org.alfresco.repo.model.Repository;
import org.alfresco.service.cmr.repository.MLText;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.junit.Assert;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;

import fr.becpg.repo.product.ProductService;
import fr.becpg.repo.product.data.FinishedProductData;
import fr.becpg.repo.product.data.ProductData;
import fr.becpg.repo.product.data.productList.ReqCtrlListDataItem;
import fr.becpg.repo.regulatory.RequirementType;
import fr.becpg.repo.repository.AlfrescoRepository;
import fr.becpg.repo.repository.RepositoryEntity;
import fr.becpg.repo.sample.StandardChocolateEclairTestProduct;
import fr.becpg.test.PLMBaseTestCase;

/**
 * Integration test for SurveyListRequirementScanner
 * 
 * @author matthieu
 */
public class SurveyListRequirementScannerIT extends PLMBaseTestCase {

    private static final Log logger = LogFactory.getLog(SurveyListRequirementScannerIT.class);

    @Autowired
    protected ProductService productService;

    @Autowired
    private AlfrescoRepository<RepositoryEntity> alfrescoRepository;

    @Autowired
    protected Repository repositoryHelper;
    

    @Test
    public void testSurveyRequirementsScanner() {
        logger.info("Starting testSurveyRequirementsScanner");

        // Create a product with surveys
        FinishedProductData product = inWriteTx(() -> {
            // Use the builder from StandardChocolateEclairTestProduct to create a product with surveys
            StandardChocolateEclairTestProduct.Builder builder = new StandardChocolateEclairTestProduct.Builder()
                    .withAlfrescoRepository(alfrescoRepository)
                    .withNodeService(nodeService)
                    .withDestFolder(getTestFolderNodeRef())
                    .withCompo(true)
                    .withSurvey(true)
                    .withSpecification(true);
            
            return builder.build().createTestProduct();
          
            
        });

        // Formulate the product which will trigger the SurveyListRequirementScanner
        inWriteTx(() -> {
            productService.formulate(product);
            return null;
        });
        
        inReadTx(() -> {
            verifySurveyRequirements(product);
            return null;
        });
    }

    /**
     * Verify that requirement controls were properly generated by the SurveyListRequirementScanner
     */
    private void verifySurveyRequirements(ProductData formulatedProduct) {
        logger.info("Verifying survey requirement controls");
        
        // Ensure requirement controls were created
        Assert.assertNotNull("Requirement control list should not be null", formulatedProduct.getReqCtrlList());
        Assert.assertFalse("Requirement control list should not be empty", formulatedProduct.getReqCtrlList().isEmpty());
        
        int requiredCount = 0;
        
        for (ReqCtrlListDataItem reqCtrl : formulatedProduct.getReqCtrlList()) {
            // Check for survey requirement controls
            if (reqCtrl.getReqType() == RequirementType.Forbidden) {
                MLText mlMessage = reqCtrl.getReqMlMessage();
                if (mlMessage != null) {
                    String message = mlMessage.getDefaultValue();
                    if (message != null && 
                        (message.contains("quality") || 
                         message.contains("specification"))) {
                        requiredCount++;
                        logger.info("Found requirement control: " + message);
                    }
                }
            }
        }
        
        // We expect at least 2 survey requirement controls for mismatched answers
        Assert.assertTrue("Should have at least 2 survey requirement controls", requiredCount >= 2);
    }
}
