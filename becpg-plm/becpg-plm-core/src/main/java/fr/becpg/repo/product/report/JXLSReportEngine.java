package fr.becpg.repo.product.report;

import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;

import org.alfresco.model.ContentModel;
import org.alfresco.service.cmr.repository.ContentReader;
import org.alfresco.service.cmr.repository.ContentService;
import org.alfresco.service.cmr.repository.NodeRef;
import org.alfresco.service.cmr.repository.NodeService;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jxls.expression.ExpressionEvaluator;
import org.jxls.transform.poi.JxlsPoiTemplateFillerBuilder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.StopWatch;

import fr.becpg.repo.entity.EntityService;
import fr.becpg.repo.formulation.spel.SpelFormulaService;
import fr.becpg.repo.report.engine.BeCPGReportEngine;
import fr.becpg.repo.report.entity.EntityImageInfo;
import fr.becpg.repo.report.entity.EntityReportData;
import fr.becpg.repo.repository.AlfrescoRepository;
import fr.becpg.repo.repository.RepositoryEntity;
import fr.becpg.report.client.ReportException;
import fr.becpg.report.client.ReportFormat;
import fr.becpg.report.client.ReportParams;

/**
 * <p>JXLSReportEngine class.</p>
 *
 * @author matthieu
 * @version $Id: $Id
 */
@Service
public class JXLSReportEngine implements BeCPGReportEngine {

	/** Constant <code>JXLS_EXTENSION=".jxls"</code> */
	public static final String JXLS_EXTENSION = ".jxls";

	private static Log logger = LogFactory.getLog(JXLSReportEngine.class);

	@Autowired
	private NodeService nodeService;

	@Autowired
	private ContentService contentService;

	@Autowired
	private SpelFormulaService formulaService;

	@Autowired
	private EntityService entityService;

	@Autowired
	private AlfrescoRepository<RepositoryEntity> alfrescoRepository;

	/** {@inheritDoc} */
	@Override
	public boolean isApplicable(NodeRef templateNodeRef, ReportFormat reportFormat) {
		return ((String) nodeService.getProperty(templateNodeRef, ContentModel.PROP_NAME)).endsWith(JXLS_EXTENSION);
	}

	/** {@inheritDoc} */
	@Override
	public void createReport(NodeRef tplNodeRef, EntityReportData reportData, OutputStream out, Map<String, Object> params) throws ReportException {
		StopWatch watch = null;
		if (logger.isDebugEnabled()) {
			watch = new StopWatch();
			watch.start();
		}

		final ReportFormat format = (ReportFormat) params.get(ReportParams.PARAM_FORMAT);

		if (format == null) {
			throw new IllegalArgumentException("Format is a mandatory param");
		}
		logger.debug("Run jxls report");


			ContentReader reader = contentService.getReader(tplNodeRef, ContentModel.PROP_CONTENT);

			Map<String, Object>  context = new HashMap<> ();

			context.put("entity", alfrescoRepository.findOne((NodeRef) params.get(BeCPGReportEngine.PARAM_ENTITY_NODEREF)));

			for (EntityImageInfo imageInfo : reportData.getImages()) {
				if (logger.isDebugEnabled()) {
					logger.debug("Adding image: IMG_" + cleanName(imageInfo.getName()));
				}
				context.put("IMG_" + cleanName(imageInfo.getName()), entityService.getImage(imageInfo.getImageNodeRef()));
			}
//
//			Transformer transformer = TransformerFactory.createTransformer(reader.getContentInputStream(), out);
//
			ExpressionEvaluator evaluator = new SpelJXLSExpressionEvaluator(formulaService);
//			transformer.getTransformationConfig().setExpressionEvaluator(evaluator);
//
//			JxlsPoiTemplateFillerBuilder.newInstance().processTemplate(context, transformer);
//			
			
			JxlsPoiTemplateFillerBuilder.newInstance()
	        		.withExpressionEvaluatorFactory(( expression ) -> evaluator)
	        		.withRecalculateFormulasOnOpening(true).withRecalculateFormulasBeforeSaving(true)
	                .withTemplate(reader.getContentInputStream())
	                .buildAndFill(context,  () ->  out );
			

		if (logger.isDebugEnabled() && (watch != null)) {
			watch.stop();
			logger.debug(" Report generated by server in  " + watch.getTotalTimeSeconds() + " seconds ");
		}

	}

	private String cleanName(String name) {
		return name.indexOf('.') >= 0 ? name.toLowerCase().substring(0, name.lastIndexOf('.')) : name;
	}

	/** {@inheritDoc} */
	@Override
	public boolean isXmlEngine() {
		return false;
	}

}
