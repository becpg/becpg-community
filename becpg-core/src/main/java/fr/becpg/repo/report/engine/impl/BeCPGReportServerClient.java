/*******************************************************************************
 * Copyright (C) 2010-2014 beCPG. 
 *  
 * This file is part of beCPG 
 *  
 * beCPG is free software: you can redistribute it and/or modify 
 * it under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation, either version 3 of the License, or 
 * (at your option) any later version. 
 *  
 * beCPG is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * GNU Lesser General Public License for more details. 
 *  
 * You should have received a copy of the GNU Lesser General Public License along with beCPG. If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package fr.becpg.repo.report.engine.impl;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Date;
import java.util.Map;

import org.alfresco.model.ContentModel;
import org.alfresco.service.cmr.repository.ContentReader;
import org.alfresco.service.cmr.repository.ContentService;
import org.alfresco.service.cmr.repository.NodeRef;
import org.alfresco.service.cmr.repository.NodeService;
import org.apache.http.client.ClientProtocolException;
import org.dom4j.Element;
import org.springframework.util.StopWatch;

import fr.becpg.repo.report.engine.BeCPGReportEngine;
import fr.becpg.report.client.AbstractBeCPGReportClient;
import fr.becpg.report.client.ReportException;
import fr.becpg.report.client.ReportFormat;
import fr.becpg.report.client.ReportParams;

/**
 * beCPGReportServerClient used to interact with reporting server
 * 
 * @author matthieu
 * 
 */
public class BeCPGReportServerClient extends AbstractBeCPGReportClient
		implements BeCPGReportEngine {

	private NodeService nodeService;

	private ContentService contentService;

	public void setNodeService(NodeService nodeService) {
		this.nodeService = nodeService;
	}

	public void setContentService(ContentService contentService) {
		this.contentService = contentService;
	}

	@Override
	public void createReport(final NodeRef tplNodeRef, final Element nodeElt,
			final OutputStream out, final Map<String, Object> params) throws ReportException {
		final ReportFormat format = (ReportFormat) params
				.get(ReportParams.PARAM_FORMAT);
		
		@SuppressWarnings("unchecked")
		final Map<String,byte[]> images 
			= (Map<String, byte[]>) params.get(ReportParams.PARAM_IMAGES);
		
		if (format == null) {
			throw new IllegalArgumentException("Format is a mandatory param");
		}

		StopWatch watch = null;
		if (logger.isDebugEnabled()) {
			watch = new StopWatch();
			watch.start();
		}
	
	
		executeInSession(new ReportSessionCallBack() {

			@Override
			public void doInReportSession(ReportSession reportSession)
					throws ReportException, ClientProtocolException, IOException {

				String templateId = tplNodeRef.toString();

				Date dateModified = (Date) nodeService.getProperty(tplNodeRef,
						ContentModel.PROP_MODIFIED);
				// Timestamp or -1
				Long timeStamp = getTemplateTimeStamp(reportSession, templateId);
				
				if(timeStamp == null){
					logger.error("Error accessing report server timeStamp is null");
					return;
				}
				
				logger.debug("Received timeStamp :"+timeStamp);
				
				if (timeStamp < 0 || timeStamp < dateModified.getTime()) {
					ContentReader reader = contentService.getReader(tplNodeRef,
							ContentModel.PROP_CONTENT);
					saveTemplate(reportSession, reader.getContentInputStream());

				}

				if(images!=null){
					for(Map.Entry<String, byte[]> entry : images.entrySet()){
						sendImage( reportSession,entry.getKey(), new ByteArrayInputStream(entry.getValue()));
					}
				}
				
				generateReport(
						reportSession,
						format.toString(),
						new ByteArrayInputStream(nodeElt.asXML().getBytes()),
						out);
			}

		});
		
		if (logger.isDebugEnabled()) {
			watch.stop();
			logger.debug( " Report generated by server in  "
					+ watch.getTotalTimeSeconds() + " seconds ");
		}

	}

}
