/*******************************************************************************
 * Copyright (C) 2010-2018 beCPG.
 *
 * This file is part of beCPG
 *
 * beCPG is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * beCPG is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with beCPG.
 *  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package fr.becpg.repo.report.engine.impl;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.alfresco.model.ContentModel;
import org.alfresco.service.cmr.repository.ContentReader;
import org.alfresco.service.cmr.repository.ContentService;
import org.alfresco.service.cmr.repository.NodeRef;
import org.alfresco.service.cmr.repository.NodeService;
import org.apache.http.client.ClientProtocolException;
import org.springframework.util.StopWatch;

import fr.becpg.repo.report.engine.BeCPGReportEngine;
import fr.becpg.repo.report.entity.EntityImageInfo;
import fr.becpg.repo.report.entity.EntityReportData;
import fr.becpg.repo.report.template.ReportTplService;
import fr.becpg.report.client.AbstractBeCPGReportClient;
import fr.becpg.report.client.ReportException;
import fr.becpg.report.client.ReportFormat;
import fr.becpg.report.client.ReportParams;

/**
 * beCPGReportServerClient used to interact with reporting server
 *
 * @author matthieu
 *
 */
public class ReportServerEngine extends AbstractBeCPGReportClient implements BeCPGReportEngine {

	private NodeService nodeService;

	private ContentService contentService;
	
	

	public void setNodeService(NodeService nodeService) {
		this.nodeService = nodeService;
	}

	public void setContentService(ContentService contentService) {
		this.contentService = contentService;
	}

	@Override
	public boolean isApplicable(NodeRef templateNodeRef, ReportFormat reportFormat) {
		return ((String) nodeService.getProperty(templateNodeRef, ContentModel.PROP_NAME)).endsWith(ReportTplService.PARAM_VALUE_DESIGN_EXTENSION);
	}

	@Override
	public void createReport(NodeRef tplNodeRef, EntityReportData reportData, OutputStream out, Map<String, Object> params) throws ReportException {
		StopWatch watch = null;
		if (logger.isDebugEnabled()) {
			watch = new StopWatch();
			watch.start();
		}

		final ReportFormat format = (ReportFormat) params.get(ReportParams.PARAM_FORMAT);

		if (format == null) {
			throw new IllegalArgumentException("Format is a mandatory param");
		}

		try (InputStream in = new ByteArrayInputStream(reportData.getXmlDataSource().asXML().getBytes())) {

			executeInSession(reportSession -> {

				String templateId = tplNodeRef.toString();

				sendTplFile(reportSession, templateId, tplNodeRef);

				@SuppressWarnings("unchecked")
				List<NodeRef> associatedTplFiles = (List<NodeRef>) params.get(ReportParams.PARAM_ASSOCIATED_TPL_FILES);

				if (associatedTplFiles != null) {
					for (NodeRef nodeRef : associatedTplFiles) {
						String assocFileId = getAssociatedTplFileId(templateId, (String) nodeService.getProperty(nodeRef, ContentModel.PROP_NAME));
						sendTplFile(reportSession, assocFileId, nodeRef);
					}
				}

				reportSession.setTemplateId(templateId);

				@SuppressWarnings("unchecked")
				final Map<EntityImageInfo, byte[]> images = (Map<EntityImageInfo, byte[]>) params.get(ReportParams.PARAM_IMAGES);

				if (images != null) {
					for (Map.Entry<EntityImageInfo, byte[]> entry : images.entrySet()) {
						sendImage(reportSession, entry.getKey().getId(), new ByteArrayInputStream(entry.getValue()));
					}
				}

				reportSession.setFormat(format.toString());
				reportSession.setLang((String) params.get(ReportParams.PARAM_LANG));

				generateReport(reportSession, in, out);
			});

		} catch (IOException e) {
			throw new ReportException(e);
		}

		if (logger.isDebugEnabled() && watch!=null) {
			watch.stop();
			logger.debug(" Report generated by server in  " + watch.getTotalTimeSeconds() + " seconds ");
		}

	}

	private String getAssociatedTplFileId(String templateId, String name) {
		return templateId + "-" + name;
	}

	private void sendTplFile(ReportSession reportSession, String templateId, NodeRef tplNodeRef)
			throws ReportException, ClientProtocolException, IOException {

		Date dateModified = (Date) nodeService.getProperty(tplNodeRef, ContentModel.PROP_MODIFIED);
		// Timestamp or -1
		Long timeStamp = getTemplateTimeStamp(reportSession, templateId);

		if (timeStamp == null) {
			logger.error("Error accessing report server timeStamp is null");
			return;
		}

		logger.debug("Received timeStamp :" + timeStamp);

		if ((timeStamp < 0) || (timeStamp < dateModified.getTime())) {
			ContentReader reader = contentService.getReader(tplNodeRef, ContentModel.PROP_CONTENT);
			if (reader != null) {
				saveTemplate(reportSession, reader.getContentInputStream());
			}
		}

	}

	@Override
	public boolean isXmlEngine() {
		return true;
	}

}
