#
# Cache configuration
#
# To configure a cache, specify a series of properties where the property names begin with the
# cache name as specified in the Spring cache definition. For example, if a cache has the name
# "cache.myCache" then the properties should all start with "cache.myCache".
# 
# For example:
#       cache.myCache.maxItems=20000
#       cache.myCache.timeToLiveSeconds=0
#
# The cache properties are used for both clustered and non-clustered configurations. For information
# relating to Hazelcast properties, please see the Hazelcast documentation:
##
# The following properties are supported by both clustered and non-clustered (e.g. cluster.type=local) caches:
#
# maxItems              The maximum size a cache may reach. Use zero to set to Integer.MAX_VALUE.
# eviction-policy       When set to "NONE", the cache will not have a bounded capacity (i.e. maxItems does not apply).
#                       Any other value will cause maxItems to be enabled: use LRU or LFU if using clustered caches
#                       so that the value is compatible in both modes (required during startup). Please note, that
#                       the actual value (e.g. LRU) is of no consequence for the non-clustered caches: eviction is
#                       performed as for any Google Guava CacheBuilder created Cache.
# timeToLiveSeconds     Cache items will expire once this time has passed after creation.
# maxIdleSeconds        Cache items will expire when not accessed for this period.
#
# tx.maxItems           Not strictly speaking a supported property (as the TransactionalCache is a separate entity),
#                       but where a TransactionalCache bean has been defined, the convention has been to use
#                       {cacheName}.tx.maxItems to specify its capacity.
#
# The following properties are available for fully-distributed caches and are not supported
# by the other cache types:
#
# cluster.type          This property will determine what type of cache is created when clustering is available.
#                       Acceptable values are:
#                           fully-distributed    A Hazelcast IMap backed distributed cache will be used.
#                                                The cache values may be stored on any member of the cluster, hence
#                                                the term fully-distributed.
#                           local                Always use a non-clustered cache - the cache values will not
#                                                reflect updates made to the equivalent cache on another cluster member.
#                           invalidating         A local cache is used, but when an update or a removal is issued to the
#                                                cache then an invalidation message is broadcast to all members of the
#                                                cluster and those members will remove the value from their cache.
#                                                Useful where frequent reads are causing performance problems (due to
#                                                remote reads) or where values are non-Serializable.
# backup-count          How many cluster members should hold a backup of the key/value pair?
# readBackupData        Reads occur from backups when one is available locally (fully-distributed caches only).
# eviction-percentage   (deprecated, does nothing) Dictates what percentage of cache entries are shed when the capacity is reached.
# merge-policy          How Hazelcast recovers from split brain syndrome, e.g. com.hazelcast.map.merge.PutIfAbsentMapMergePolicy


# Default setting for transactional caches allows disabling/enabling
# of all cache statistics in one setting (provided individual settings
# haven't been made).
cache.becpgAssocsSharedCache.configCacheName=becpgAssocsCache

cache.becpgAssocsCache.tx.maxItems=10000
cache.becpgAssocsCache.tx.statsEnabled=true
cache.becpgAssocsCache.maxItems=50000
cache.becpgAssocsCache.timeToLiveSeconds=0
cache.becpgAssocsCache.maxIdleSeconds=3600
cache.becpgAssocsCache.cluster.type=invalidating
cache.becpgAssocsCache.backup-count=1
cache.becpgAssocsCache.eviction-policy=LRU
cache.becpgAssocsCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.becpgAssocsCache.readBackupData=false
cache.becpgAssocsCache.clearable=true


cache.becpgChildAssocsSharedCache.configCacheName=becpgChildAssocsCache

cache.becpgChildAssocsCache.tx.maxItems=500
cache.becpgChildAssocsCache.tx.statsEnabled=true
cache.becpgChildAssocsCache.maxItems=1000
cache.becpgChildAssocsCache.timeToLiveSeconds=0
cache.becpgChildAssocsCache.maxIdleSeconds=3600
cache.becpgChildAssocsCache.cluster.type=invalidating
cache.becpgChildAssocsCache.backup-count=1
cache.becpgChildAssocsCache.eviction-policy=LRU
cache.becpgChildAssocsCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.becpgChildAssocsCache.readBackupData=false
cache.becpgChildAssocsCache.clearable=true


cache.becpgRepositorySharedCache.configCacheName=becpgRepositoryCache

cache.becpgRepositoryCache.tx.maxItems=200
cache.becpgRepositoryCache.tx.statsEnabled=true
cache.becpgRepositoryCache.maxItems=500
cache.becpgRepositoryCache.timeToLiveSeconds=0
cache.becpgRepositoryCache.maxIdleSeconds=3600
cache.becpgRepositoryCache.cluster.type=invalidating
cache.becpgRepositoryCache.backup-count=1
cache.becpgRepositoryCache.eviction-policy=LRU
cache.becpgRepositoryCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.becpgRepositoryCache.readBackupData=false
cache.becpgRepositoryCache.clearable=true



cache.becpgCharactSharedCache.configCacheName=becpgCharactCache

cache.becpgCharactCache.tx.maxItems=1000
cache.becpgCharactCache.tx.statsEnabled=true
cache.becpgCharactCache.maxItems=5000
cache.becpgCharactCache.timeToLiveSeconds=0
cache.becpgCharactCache.maxIdleSeconds=3600
cache.becpgCharactCache.cluster.type=invalidating
cache.becpgCharactCache.backup-count=1
cache.becpgCharactCache.eviction-policy=LRU
cache.becpgCharactCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.becpgCharactCache.readBackupData=false
cache.becpgCharactCache.clearable=true

### Auditing config

audit.enabled = true
#audit.alfresco-access.enabled=true
#audit.filter.alfresco-access.transaction.user=.System;~null;.*

### Enabling sub-actions

# Enable the auditing of sub-actions. Normally disabled as these values are
# not normally needed by audit configurations, but may be useful to
# developers
#audit.alfresco-access.sub-actions.enabled=true

becpg.audit.formulation = audit,stopwatch,tracer
becpg.audit.batch = audit,stopwatch,tracer
becpg.audit.activity = audit

